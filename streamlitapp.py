import streamlit as st
import os
import torch
from torchvision.utils import make_grid
import matplotlib.pyplot as plt
from main import load_model

st.set_page_config(layout='wide')
with st.sidebar:
    st.image(
        'https://imageio.forbes.com/specials-images/imageserve/5f51c38ba72e09805e578c53/3-Predictions-For-The-Role-Of'
        '-Artificial-Intelligence-In-Art-And-Design/960x0.jpg?format=jpg&width=960')
    st.title("Generative Adversarial Networks")
    st.info("With this model we are able to generate artificial anime faces.")

st.title('Deep Convolutional GAN')
epoch_array = [5,25,50]
models = []
for i in epoch_array:
    model = load_model(i)
    models.append([model, i])

image_size = 64
batch_size = 128
stats = (0.5, 0.5, 0.5), (0.5, 0.5, 0.5)


def denorm(img_tensors):
    return img_tensors * stats[1][0] + stats[0][0]


def show_images(images, nmax=25):
    fig, ax = plt.subplots(figsize=(5, 5))
    ax.set_xticks([])
    ax.set_yticks([])
    st.image(make_grid(denorm(images.detach()[:nmax]), nrow=5).permute(1, 2, 0).numpy())


def make_images(latent_size=128):
    xb = torch.randn(batch_size, latent_size, 1, 1)
    with tab1:
        with col1:
            generator,epoch = models[0]
            fake_images = generator(xb)
            st.write(f"Images generated by the model trained for {epoch} epochs:")
            show_images(fake_images)
        with col2:
            generator,epoch = models[1]
            fake_images = generator(xb)
            st.write(f"Images generated by the model trained for {epoch} epochs:")
            show_images(fake_images)
        with col3:
            generator,epoch = models[2]
            fake_images = generator(xb)
            st.write(f"Images generated by the model trained for {epoch} epochs:")
            show_images(fake_images)


tab1,tab2 = st.tabs(["Demonstration","About"])
with tab1:
    col1,col2,col3 = st.columns(3)
    with col1:
        st.button("Refresh",on_click=make_images)
        
with tab2:
    st.markdown("""
                <p style="font-size:20px; text-align:center">The DCGAN architecture combines two main components: a generator network and a discriminator network. The generator takes random noise as input and generates images that attempt to resemble real images. On the other hand, the discriminator\'s role is to distinguish between real and generated images. The two networks are trained simultaneously in a competitive manner, with the goal of the generator generating increasingly realistic images and the discriminator becoming more accurate in its discrimination.</p>
                <img style="display: block; margin-left: auto; margin-right: auto;padding: 5px;" src="https://www.researchgate.net/publication/343597759/figure/fig4/AS:923532934529034@1597198818441/The-architecture-of-the-generator-and-the-discriminator-in-a-DCGAN-model-FSC-is-the.ppm" />
                """,unsafe_allow_html=True)
    
